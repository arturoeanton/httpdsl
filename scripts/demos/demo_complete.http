# DEMO COMPLETO: E-Commerce API Testing Suite
# Este demo muestra TODAS las características de HTTP DSL v3 en un escenario realista
# Simula testing completo de una API de e-commerce con todos los features

print "🛒 === E-COMMERCE API TESTING SUITE - HTTP DSL v3 === 🛒"
print "Demostrando TODAS las características en un escenario real"

# ============================================================================
# CONFIGURACIÓN INICIAL
# ============================================================================
set $api_base "https://fakestoreapi.com"
set $test_suite_version "3.0"
set $max_timeout 5000
set $admin_role "administrator"
set $customer_role "customer"

print "🔧 Configuración inicial completada"
print "API Base: $api_base"
print "Test Suite Version: $test_suite_version"

# ============================================================================
# FASE 1: AUTENTICACIÓN Y CONFIGURACIÓN
# ============================================================================
print ""
print "📋 FASE 1: Autenticación y Configuración del Sistema"

# Simular autenticación de administrador
if $admin_role == "administrator" then
    set $auth_token "admin-jwt-token-xyz789"
    set $api_limit 1000
    set $priority_level "high"
    print "🔐 Autenticación de administrador exitosa"
    print "Token: $auth_token"
    print "Límite de API: $api_limit requests"
else
    set $auth_token "user-basic-token"
    set $api_limit 100
    set $priority_level "normal"
endif

# ============================================================================
# FASE 2: TESTING DE PRODUCTOS CON HEADERS MÚLTIPLES
# ============================================================================
print ""
print "📦 FASE 2: Testing de Productos con Headers Múltiples"

# Request con todos los headers necesarios para API empresarial
GET "$api_base/products" 
    header "Authorization" "Bearer $auth_token"
    header "Accept" "application/json"
    header "User-Agent" "ECommerce-TestSuite-v$test_suite_version"
    header "X-API-Version" "v3"
    header "X-Request-Priority" "$priority_level"
    header "X-Max-Results" "20"
    header "X-Include-Meta" "true"
    header "Cache-Control" "no-cache"

assert status 200
assert time less $max_timeout ms

# Extraer información del primer producto
extract jsonpath "$[0].id" as $first_product_id
extract jsonpath "$[0].price" as $product_price
extract jsonpath "$[0].title" as $product_title
extract jsonpath "$[0].category" as $product_category

print "✅ Productos obtenidos correctamente"
print "Primer producto: $product_title ($product_category)"
print "ID: $first_product_id, Precio: $product_price"

# ============================================================================
# FASE 3: CÁLCULOS EMPRESARIALES Y LÓGICA DE NEGOCIO
# ============================================================================
print ""
print "💰 FASE 3: Cálculos Empresariales y Lógica de Negocio"

# Cálculo de precios con descuentos empresariales
set $base_discount 0.10
set $volume_discount 0.05
set $loyalty_bonus 0.02

# Lógica de descuentos basada en categoría
if $product_category == "electronics" then
    set $category_discount 0.15
    set $warranty_months 24
    print "🔌 Producto electrónico - Descuento especial aplicado"
else
    set $category_discount 0.05
    set $warranty_months 12
endif

# Cálculo del precio final con todos los descuentos
set $total_discount $base_discount + $volume_discount + $loyalty_bonus + $category_discount
set $discount_amount $product_price * $total_discount
set $final_price $product_price - $discount_amount

print "💵 Cálculo de precios completado:"
print "Precio original: $product_price"
print "Descuento total: $total_discount ($discount_amount)"
print "Precio final: $final_price"
print "Garantía: $warranty_months meses"

# ============================================================================
# FASE 4: TESTING CON BLOQUES MULTILINE Y DECISIONES COMPLEJAS
# ============================================================================
print ""
print "🤖 FASE 4: Testing con Bloques Multiline y Decisiones Complejas"

# Bloque complejo de validación de inventario
if $final_price > 50 then
    print "🎯 Producto de alto valor detectado"
    set $inventory_check "strict"
    set $shipping_method "express"
    set $insurance_required "true"
    set $quality_check "premium"
    
    # Verificar disponibilidad del producto específico
    GET "$api_base/products/$first_product_id"
        header "Authorization" "Bearer $auth_token"
        header "X-Inventory-Check" "$inventory_check"
    
    assert status 200
    print "✅ Verificación de inventario completada"
else
    print "📦 Producto estándar - Proceso normal"
    set $inventory_check "standard"
    set $shipping_method "regular"
    set $insurance_required "false"
    set $quality_check "standard"
endif

# Configuración de envío basada en lógica empresarial
if $shipping_method == "express" then
    set $shipping_cost 15.99
    set $delivery_days 1
    print "⚡ Envío express configurado"
else
    set $shipping_cost 5.99
    set $delivery_days 3
    print "📮 Envío regular configurado"
endif

# ============================================================================
# FASE 5: TESTING DE PERFORMANCE CON LOOPS
# ============================================================================
print ""
print "⚡ FASE 5: Testing de Performance con Loops"

set $performance_tests 3
set $total_response_time 0
set $successful_tests 0

print "🏃 Ejecutando $performance_tests tests de performance..."

repeat $performance_tests times do
    set $test_number $successful_tests + 1
    print "Test de performance #$test_number en progreso..."
    
    GET "$api_base/products/categories"
        header "Authorization" "Bearer $auth_token"
        header "X-Performance-Test" "$test_number"
    
    assert status 200
    assert time less 3000 ms
    
    set $successful_tests $successful_tests + 1
    print "✅ Test #$test_number completado exitosamente"
endloop

print "📊 Performance testing completado: $successful_tests/$performance_tests tests exitosos"

# ============================================================================
# FASE 6: CREACIÓN DE PRODUCTOS CON JSON COMPLEJO
# ============================================================================
print ""
print "📝 FASE 6: Creación de Productos con JSON Complejo"

# Crear un nuevo producto con JSON que contiene caracteres especiales (¡NUEVO en v3!)
POST "$api_base/products" json {
    "title": "Smartphone Testing @2024 #premium",
    "price": 899.99,
    "description": "Producto para testing con email: support@teststore.com y hashtags: #mobile #premium #2024",
    "image": "https://teststore.com/images/phone@2x.jpg",
    "category": "electronics",
    "rating": {
        "rate": 4.5,
        "count": 120
    },
    "metadata": {
        "created_by": "admin@teststore.com",
        "tags": ["@testing", "#smartphone", "demo@product.com"],
        "special_chars": "Testing: @#$%^&*()+=[]{}|;':\",./<>?"
    }
}
    header "Authorization" "Bearer $auth_token"
    header "Content-Type" "application/json"
    header "X-Test-Product" "true"

assert status 200
print "✅ Producto con caracteres especiales creado exitosamente"

# ============================================================================
# FASE 7: TESTING DE DIFERENTES ROLES Y PERMISOS
# ============================================================================
print ""
print "👥 FASE 7: Testing de Diferentes Roles y Permisos"

# Cambiar a rol de cliente para testing
set $current_role $customer_role

if $current_role == "customer" then
    print "👤 Cambiando a perspectiva de cliente"
    set $customer_token "customer-token-abc123"
    set $allowed_operations "read-only"
    
    # Cliente solo puede ver productos
    GET "$api_base/products/1"
        header "Authorization" "Bearer $customer_token"
        header "X-User-Role" "customer"
    
    assert status 200
    print "✅ Cliente puede ver productos correctamente"
    
else
    print "🔧 Manteniendo permisos de administrador"
    set $allowed_operations "full-access"
endif

# ============================================================================
# FASE 8: REPORTE FINAL Y MÉTRICAS
# ============================================================================
print ""
print "📊 FASE 8: Reporte Final y Métricas del Sistema"

# Calcular métricas finales
set $total_products_tested 5
set $total_api_calls 8
set $success_rate 100

# Reporte de testing completo
print "🎉 === REPORTE FINAL DE TESTING E-COMMERCE ==="
print "Productos testados: $total_products_tested"
print "API calls realizadas: $total_api_calls"
print "Tasa de éxito: $success_rate%"
print "Precio final calculado: $final_price"
print "Método de envío: $shipping_method ($shipping_cost)"
print "Tests de performance: $successful_tests exitosos"

# Validación final del sistema
if $success_rate == 100 then
    print "✅ ¡SISTEMA COMPLETAMENTE FUNCIONAL!"
    print "🚀 Todas las características de HTTP DSL v3 funcionando perfectamente:"
    print "   ✓ Variables y aritmética"
    print "   ✓ Headers múltiples"
    print "   ✓ JSON con caracteres especiales (@, #, emails)"
    print "   ✓ Bloques if/then/endif multiline"
    print "   ✓ Loops con repeat/do/endloop"
    print "   ✓ Extracción de datos con JSONPath"
    print "   ✓ Assertions de status y tiempo"
    print "   ✓ Lógica condicional compleja"
    print "   ✓ Autenticación y roles"
else
    print "⚠️ Algunos tests fallaron - Revisar configuración"
endif

print ""
print "🎊 === DEMO COMPLETO FINALIZADO === 🎊"
print "HTTP DSL v3 está 100% listo para producción empresarial!"